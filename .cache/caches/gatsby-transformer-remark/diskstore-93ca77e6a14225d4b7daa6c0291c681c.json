{"expireTime":9007200883948858000,"key":"transformer-remark-markdown-ast-f46e6346745a9767208e2afe016b8391-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"去年の夏頃に趣味で作った","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":13,"offset":13},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/kota-yata/Percom","children":[{"type":"text","value":"Percom","position":{"start":{"line":2,"column":14,"offset":14},"end":{"line":2,"column":20,"offset":20},"indent":[]}}],"position":{"start":{"line":2,"column":13,"offset":13},"end":{"line":2,"column":58,"offset":58},"indent":[]},"data":{"hProperties":{"target":"_blank","rel":"nofollow noopener noreferrer"}}},{"type":"text","value":"なる、順列と組み合わせ列挙をやってくれるnpmパッケージを久々にリファクタリングした時の記録です。Node.js使ってて「順列/組み合わせ列挙してぇなぁ」とか思ったことないのでしばらく前にリポジトリ見てUsed by 5になってた時は不思議な気分でした。","position":{"start":{"line":2,"column":58,"offset":58},"end":{"line":2,"column":185,"offset":185},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":185,"offset":185},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/51294895/113145292-3a2a3c80-9269-11eb-9df4-9d5f74f92f57.png","alt":"謎のユーザーたち","position":{"start":{"line":4,"column":1,"offset":187},"end":{"line":4,"column":115,"offset":301},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":187},"end":{"line":4,"column":115,"offset":301},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"今までのアルゴリズムはほぼQiitaのコピペみたいなもんで、パッケージ作者が書いてないアルゴリズム使うのは流石によくないだろと思ったので書き換えることにしました。なぜ書けもしないパッケージを作ろうとしたのかは謎です。","position":{"start":{"line":6,"column":1,"offset":303},"end":{"line":6,"column":109,"offset":411},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":303},"end":{"line":6,"column":109,"offset":411},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"前の順列列挙のアルゴリズムがこちら","position":{"start":{"line":8,"column":1,"offset":413},"end":{"line":8,"column":18,"offset":430},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":413},"end":{"line":8,"column":18,"offset":430},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">per</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> parts <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          parts<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> row <span class=\"token operator\">=</span> <span class=\"token function\">per</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">,</span> num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> row<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":10,"column":1,"offset":432},"end":{"line":30,"column":4,"offset":958},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"まあQiitaに書くくらいなので悪くはないと思いますが、ネスト深いしこの関数だけで完結させていて引数のエラーハンドリングとかしてないので普通に書き直しがいはありそう。","position":{"start":{"line":32,"column":1,"offset":960},"end":{"line":32,"column":84,"offset":1043},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":960},"end":{"line":32,"column":84,"offset":1043},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#書いていく","title":null,"children":[],"data":{"hProperties":{"aria-label":"書いていく permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"書いていく","position":{"start":{"line":34,"column":4,"offset":1048},"end":{"line":34,"column":9,"offset":1053},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1045},"end":{"line":34,"column":9,"offset":1053},"indent":[]},"data":{"id":"書いていく","htmlAttributes":{"id":"書いていく"},"hProperties":{"id":"書いていく","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"もう一つ悲しいお知らせをすると、組み合わせ列挙の方もほぼQiitaのコピペなんですよね。しばくぞ。","position":{"start":{"line":35,"column":1,"offset":1054},"end":{"line":35,"column":50,"offset":1103},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1054},"end":{"line":35,"column":50,"offset":1103},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"組み合わせの方はまた今度書き直すとして順列の方をどうにか効率的にできないかと考えていたのですが、組み合わせとかと比べるとひたすら列挙していく感じが強いのでよっぽどひどい実装しない限り速度はそこまで変わらないのでは、という気づきを経て、思いついたものをよく考えずに書くことにしました。","position":{"start":{"line":37,"column":1,"offset":1105},"end":{"line":37,"column":142,"offset":1246},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1105},"end":{"line":37,"column":142,"offset":1246},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filterArray</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i <span class=\"token operator\">!==</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newArray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calcPer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> current <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> tempCurrent <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    tempCurrent<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> slicedArray <span class=\"token operator\">=</span> <span class=\"token function\">filterArray</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> returned <span class=\"token operator\">=</span> <span class=\"token function\">calcPer</span><span class=\"token punctuation\">(</span>slicedArray<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> tempCurrent<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returned <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tempCurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tempCurrent <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">per</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Number of elements of array must be greater than number to choose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">calcPer</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":39,"column":1,"offset":1248},"end":{"line":63,"column":4,"offset":2054},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"速度は置いといて、個人的には割と可読性の高いコードが書けたんじゃないかなと思ってます。実際に再帰的に演算をする関数と、エラーハンドリングだけ先にするメインの関数に分けて、条件分岐を減らしてネストも浅くしたので割と満足しています。詰まった点としては、配列を代入すると参照渡しになるというJavaScriptの仕様を知らずに","position":{"start":{"line":64,"column":1,"offset":2055},"end":{"line":64,"column":161,"offset":2215},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">tempCurrent</code>","position":{"start":{"line":64,"column":161,"offset":2215},"end":{"line":64,"column":178,"offset":2232},"indent":[]}},{"type":"text","value":"に引数","position":{"start":{"line":64,"column":178,"offset":2232},"end":{"line":64,"column":181,"offset":2235},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">current</code>","position":{"start":{"line":64,"column":181,"offset":2235},"end":{"line":64,"column":194,"offset":2248},"indent":[]}},{"type":"text","value":"を代入して訳分からん返り値をゲットしてたところくらいです。まあただハマったおかげで配列操作のどの関数が破壊的でどの関数が非破壊的なのかの区別もついたしJavaScript力も上がったので全然無駄ではなかった。","position":{"start":{"line":64,"column":194,"offset":2248},"end":{"line":64,"column":298,"offset":2352},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2055},"end":{"line":64,"column":298,"offset":2352},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"一つ気になっている点として、例外処理の返り値に","position":{"start":{"line":66,"column":1,"offset":2354},"end":{"line":66,"column":24,"offset":2377},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">null</code>","position":{"start":{"line":66,"column":24,"offset":2377},"end":{"line":66,"column":34,"offset":2387},"indent":[]}},{"type":"text","value":"を使うのが適切なのかどうかは疑問です。文字列で返すのも気持ち悪いので","position":{"start":{"line":66,"column":34,"offset":2387},"end":{"line":66,"column":68,"offset":2421},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">null</code>","position":{"start":{"line":66,"column":68,"offset":2421},"end":{"line":66,"column":78,"offset":2431},"indent":[]}},{"type":"text","value":"にしてますが、","position":{"start":{"line":66,"column":78,"offset":2431},"end":{"line":66,"column":85,"offset":2438},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">returned</code>","position":{"start":{"line":66,"column":85,"offset":2438},"end":{"line":66,"column":99,"offset":2452},"indent":[]}},{"type":"text","value":"に値が入らなかった時に","position":{"start":{"line":66,"column":99,"offset":2452},"end":{"line":66,"column":110,"offset":2463},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">undefined</code>","position":{"start":{"line":66,"column":110,"offset":2463},"end":{"line":66,"column":125,"offset":2478},"indent":[]}},{"type":"text","value":"が入るだろうという僕の認識が間違っていた場合バグの温床になるので少し怖いです。","position":{"start":{"line":66,"column":125,"offset":2478},"end":{"line":66,"column":164,"offset":2517},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2354},"end":{"line":66,"column":164,"offset":2517},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#jsにおけるtail-call-optimization-おまけ","title":null,"children":[],"data":{"hProperties":{"aria-label":"jsにおけるtail call optimization おまけ permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"JSにおけるTail Call Optimization (おまけ)","position":{"start":{"line":68,"column":4,"offset":2522},"end":{"line":68,"column":38,"offset":2556},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2519},"end":{"line":68,"column":38,"offset":2556},"indent":[]},"data":{"id":"jsにおけるtail-call-optimization-おまけ","htmlAttributes":{"id":"jsにおけるtail-call-optimization-おまけ"},"hProperties":{"id":"jsにおけるtail-call-optimization-おまけ","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"アルゴリズム考える段階でJavaScriptにおける","position":{"start":{"line":69,"column":1,"offset":2557},"end":{"line":69,"column":27,"offset":2583},"indent":[]}},{"type":"link","title":null,"url":"https://qiita.com/badpingpong/items/6b5035ab80850ae88a0a","children":[{"type":"text","value":"末尾呼び出し最適化(Tail Call Optimization)","position":{"start":{"line":69,"column":28,"offset":2584},"end":{"line":69,"column":61,"offset":2617},"indent":[]}}],"position":{"start":{"line":69,"column":27,"offset":2583},"end":{"line":69,"column":120,"offset":2676},"indent":[]},"data":{"hProperties":{"target":"_blank","rel":"nofollow noopener noreferrer"}}},{"type":"text","value":"(以下TCO)についてちょっと調べてたところ、SafariでしかTCOが実装されてないことに気づきました。なんでだろと思って色々調べていると、Stack Overflowにこんな記事が。\n","position":{"start":{"line":69,"column":120,"offset":2676},"end":{"line":70,"column":1,"offset":2770},"indent":[1]}},{"type":"link","title":null,"url":"https://stackoverflow.com/questions/54719548/tail-call-optimization-implementation-in-javascript-engines","children":[{"type":"text","value":"https://stackoverflow.com/questions/54719548/tail-call-optimization-implementation-in-javascript-engines","position":{"start":{"line":70,"column":1,"offset":2770},"end":{"line":70,"column":105,"offset":2874},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":2770},"end":{"line":70,"column":105,"offset":2874},"indent":[]},"data":{"hProperties":{"target":"_blank","rel":"nofollow noopener noreferrer"}}}],"position":{"start":{"line":69,"column":1,"offset":2557},"end":{"line":70,"column":105,"offset":2874},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"どうやら、TC39のミーティングで分裂が起きていて、一時はES6に実装され、ChromeもOrigin TrialsでTCOを実装していたにも関わらずEdgeチームはWindows ABI云々、Mozillaはなんだか分からんがES6策定時の議論を掘り返して反対し、最終的にはChromeもUnshippingしてしまったという経緯があったらしい。他の記事でBabelはトランスパイル時にTCOしてくれると知ってBabel使ったるわいと思っていたのですが、Babelもver.6で無効にされたらしく、現在のJavaScript環境ではTCOはされていないと認識した方が良さそうでした。Babelが無効にした経緯とかTC39で議論が起きた細かい理由とかは調べていませんが、特にTCOを実装することでスループットに逆効果とかそういう問題がないのであれば実装して欲しい感が強いですね。速度には期待していませんが現実的な範囲でスタックオーバーフローが出ることが多いのでもうちょっと耐えてくれよと思うことは多いです。","position":{"start":{"line":72,"column":1,"offset":2876},"end":{"line":72,"column":454,"offset":3329},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":2876},"end":{"line":72,"column":454,"offset":3329},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#おわりに","title":null,"children":[],"data":{"hProperties":{"aria-label":"おわりに permalink","class":"anchor before"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"おわりに","position":{"start":{"line":74,"column":4,"offset":3334},"end":{"line":74,"column":8,"offset":3338},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":3331},"end":{"line":74,"column":8,"offset":3338},"indent":[]},"data":{"id":"おわりに","htmlAttributes":{"id":"おわりに"},"hProperties":{"id":"おわりに","style":"position:relative;"}}},{"type":"paragraph","children":[{"type":"text","value":"次に暇な日ができたら組み合わせ列挙の方も書き直したいと思います。あとTypeScript移行とかもやりたい","position":{"start":{"line":75,"column":1,"offset":3339},"end":{"line":75,"column":54,"offset":3392},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":3339},"end":{"line":75,"column":54,"offset":3392},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":76,"column":1,"offset":3393}}}}