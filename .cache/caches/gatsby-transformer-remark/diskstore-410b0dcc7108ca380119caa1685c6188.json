{"expireTime":9007200871935260000,"key":"transformer-remark-markdown-html-bf7ef343b08883bbf8d41d88449eb237-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<p>最近、基本情報技術者試験の勉強をする中でパイプライン処理について少し調べたので備忘録的に書き残しておきます。Zennに書こうとも思いましたがあっちにはもっと有益な記事だけ残していきたいのでしょうもない備忘録はこっちに書きます。</p>\n<h2 id=\"パイプライン処理ってなに？\" style=\"position:relative;\"><a href=\"#%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3%E5%87%A6%E7%90%86%E3%81%A3%E3%81%A6%E3%81%AA%E3%81%AB%EF%BC%9F\" aria-label=\"パイプライン処理ってなに？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>パイプライン処理ってなに？</h2>\n<p>パイプライン処理とは、CPUが複数の命令を実行段階をずらしながら同時並行的に実行することでスループットの向上を目指すという処理方式のことです。ここでいう実行段階とは、</p>\n<ol>\n<li>実行プログラムをメモリからレジスタに読み込む<strong>命令フェッチ</strong></li>\n<li>実行プログラムを解析して実行準備を行う<strong>命令デコード</strong></li>\n<li>CPUの演算ユニットで実際に演算を行う<strong>実行</strong></li>\n<li>演算結果をメモリに書き込む<strong>ライトバック</strong></li>\n</ol>\n<p>の4段階に分かれます。もっと細かく分ける場合もありますがとりあえずこの4ステップということにしておきます。\n従来の原始的なCPUの処理であれば、この4段階を順番に実行し、一つの命令が完了したら次の命令に移るという逐次処理を行うのですが、命令が複雑になるにつれそれではスループットが大幅に低下し処理性能が落ちてしまいます。そこで考案されたのがパイプライン処理です。パイプライン処理ではこの4段階を一つずつずらして並列処理を行うことで、従来の処理よりも高速に、複数の命令の実行を可能にしたのです。\n<img src=\"https://www.researchgate.net/profile/Jean_Christophe_Le_Lann/publication/269393735/figure/fig2/AS:392334681362441@1470551285619/Execution-configuration-of-three-stages-pipeline-processing-three-consecutive-bursts.png\" alt=\"pipeline-processing\">\n<span style=\"font-style:italic; font-size: 13px; color:#888888;\">Uploaded by Jean-Christophe Le Lann - researchgate.net</span><br></p>\n<h3 id=\"スーパー・パイプライン\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%83%BC%E3%83%91%E3%83%BC%E3%83%BB%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3\" aria-label=\"スーパー・パイプライン permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>スーパー・パイプライン</h3>\n<p>上記のパイプライン処理より高速なスループットを実現するのがスーパー・パイプラインという処理方式です。スーパー・パイプラインでは、上記のパイプライン処理で4分割したステップのそれぞれをさらに2分割することで各ステップの処理をさらに単純化し、通常のパイプライン処理よりももっと高速な並列処理を実現しようという方式です。</p>\n<h3 id=\"スーパースカラー\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%83%BC%E3%83%91%E3%83%BC%E3%82%B9%E3%82%AB%E3%83%A9%E3%83%BC\" aria-label=\"スーパースカラー permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>スーパースカラー</h3>\n<p>スーパー・パイプラインと並んで通常のパイプライン処理を強化するもう一つの方法がスーパースカラーです。スーパースカラーはパイプライン処理を行うCPU等のプロセッサを複数動作させることで、ハードウェアレベルでスペックを上げてスループットを上げるという処理方式です。言うたら人海戦術です。ただスーパースカラーの場合、片方の演算結果をもう片方の演算に利用する場合等必ずしも同時にデコードされた複数の命令を並列に実行できないこともあるため、単純にプロセッサーが2倍になったからといって処理性能が2倍になるわけではありません。\n<img src=\"https://www.ap-siken.com/kakomon/27_haru/img/09.gif\" alt=\"extra-pipeline\">\n<span style=\"font-style:italic; font-size: 13px; color:#888888;\"><a href=\"http://semirara.sota1235.net/general/%E3%82%B9%E3%83%BC%E3%83%91%E3%83%BC%E3%82%B9%E3%82%AB%E3%83%A9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://semirara.sota1235.net/general/スーパースカラ</a></span><br></p>\n<h2 id=\"パイプライン・ハザード\" style=\"position:relative;\"><a href=\"#%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%BB%E3%83%8F%E3%82%B6%E3%83%BC%E3%83%89\" aria-label=\"パイプライン・ハザード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>パイプライン・ハザード</h2>\n<p>このパイプライン処理によってCPUの処理性能は大幅に上がったわけですが、従来のCPUでは起こり得なかった<strong>パイプライン・ハザード</strong>という問題が浮かび上がりました。\nパイプライン・ハザードとは、主に依存関係のある命令同士で発生する、ある命令がライトバックを行わないうちに後続の命令がそのレジスタを読み込みに行ってしまう場合などのエラーです。これが起きると、理想的なパイプライン処理の場合1になるはずのCPI(Cycles Per Instruction)が大きくなる、つまりスループットが大幅に低下することになります。</p>\n<p>このパイプライン・ハザードを防ぐために分岐予測やNop代入などさまざまな方法があるのですが、それについてはまた後ほど書きたいと思います</p>"}